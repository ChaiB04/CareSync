plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.sonarqube" version "6.0.1.5171"
}

group = 'caresync'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

//sonar {
//    properties {
//        property "sonar.projectKey", "CareSync"
//        property "sonar.projectName", "CareSync"
//        property "sonar.qualitygate.wait", true
//        property "sonar.host.url", "http://localhost:9090"
//        property "sonar.token", "sqp_93e157c58452a90110c1aff8dd7c548b10be611c"
//
//    }
//}

sonar {
    properties {
        property "sonar.projectKey", "individualsem6_caresync"
        property "sonar.organization", "individualsem6"
        property "sonar.java.binaries", "build/classes"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.token", "b52a51ce51f0652799e658a282c2dfb289de2e68"
//                System.getenv('SONAR_TOKEN')

        property "sonar.branch.name", "main"
    }
}

task runSonarQube {
    doLast {
        // Get the current branch name
        def currentBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()

        // Only run SonarQube analysis on the 'main' branch
        if (currentBranch == 'main') {
            println "Running SonarQube analysis on branch: $currentBranch"

            // Run the SonarQube analysis using the correct Gradle task
            exec {
                commandLine './gradlew', 'sonar'
            }
        } else {
            println "Skipping SonarQube analysis as the current branch is: $currentBranch"
        }
    }
}


tasks.named('test') {
    useJUnitPlatform()
}
